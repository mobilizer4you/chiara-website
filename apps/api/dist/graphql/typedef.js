"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
exports.__esModule = true;
exports.typeDefs = void 0;
var apollo_server_express_1 = require("apollo-server-express");
// A schema is a collection of type definitions (hence "typeDefs")
// that together define the "shape" of queries that are executed against
// your data.
exports.typeDefs = (0, apollo_server_express_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.\n\n  # This \"Book\" type defines the queryable fields for every book in our data source.\n  type Book {\n    title: String\n    author: String\n  }\n\n  type Account {\n    id: String!\n    userId: String!\n    type: String!\n    provider: String!\n    providerAccountId: String!\n    refresh_token: String\n    access_token: String\n    expires_at: Int\n    token_type: String\n    scope: String\n    id_token: String\n    session_state: String\n    user: User\n  }\n\n  type User {\n    id: String!\n    name: String\n    email: String\n    emailVerified: String\n    image: String\n    accounts: [Account]\n    sessions: [Session]\n  }\n\n  type Session {\n    id: String!\n    sessionToken: String!\n    userId: String!\n    expires: String!\n    user: User!\n  }\n\n  type MutationResponse {\n    success: Boolean!\n    message: String!\n  }\n\n  type loginResponse {\n    status: MutationResponse!\n    user: User\n    token: String!\n  }\n\n  input loginRequest {\n    email: String!\n    password: String!\n  }\n\n  # The \"Query\" type is special: it lists all of the available queries that\n  # clients can execute, along with the return type for each. In this\n  # case, the \"books\" query returns an array of zero or more Books (defined above).\n  type Query {\n    books: [Book]\n  }\n\n  type Mutation {\n    login(loginRequest: loginRequest!): loginResponse!\n  }\n"], ["\n  # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.\n\n  # This \"Book\" type defines the queryable fields for every book in our data source.\n  type Book {\n    title: String\n    author: String\n  }\n\n  type Account {\n    id: String!\n    userId: String!\n    type: String!\n    provider: String!\n    providerAccountId: String!\n    refresh_token: String\n    access_token: String\n    expires_at: Int\n    token_type: String\n    scope: String\n    id_token: String\n    session_state: String\n    user: User\n  }\n\n  type User {\n    id: String!\n    name: String\n    email: String\n    emailVerified: String\n    image: String\n    accounts: [Account]\n    sessions: [Session]\n  }\n\n  type Session {\n    id: String!\n    sessionToken: String!\n    userId: String!\n    expires: String!\n    user: User!\n  }\n\n  type MutationResponse {\n    success: Boolean!\n    message: String!\n  }\n\n  type loginResponse {\n    status: MutationResponse!\n    user: User\n    token: String!\n  }\n\n  input loginRequest {\n    email: String!\n    password: String!\n  }\n\n  # The \"Query\" type is special: it lists all of the available queries that\n  # clients can execute, along with the return type for each. In this\n  # case, the \"books\" query returns an array of zero or more Books (defined above).\n  type Query {\n    books: [Book]\n  }\n\n  type Mutation {\n    login(loginRequest: loginRequest!): loginResponse!\n  }\n"])));
var templateObject_1;
